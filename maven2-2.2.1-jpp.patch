From 1633026ab5ef24701ce8617db283079a185d6205 Mon Sep 17 00:00:00 2001
From: Stanislav Ochotnicky <sochotnicky@redhat.com>
Date: Tue, 18 Jan 2011 10:40:00 +0100
Subject: [PATCH 2/7] Maven JPP mode patch

---
 .../artifact/manager/DefaultWagonManager.java      |   31 ++++++++++++++++++++
 .../metadata/DefaultRepositoryMetadataManager.java |    2 +-
 .../artifact/resolver/DefaultArtifactResolver.java |    3 +-
 maven-artifact/pom.xml                             |    5 +++
 .../repository/layout/DefaultRepositoryLayout.java |   17 ++++++++++-
 .../resolver/DefaultArtifactCollector.java         |    9 ++++-
 .../main/resources/META-INF/plexus/components.xml  |    6 ++++
 .../apache/maven/plugin/MavenPluginCollector.java  |   18 +++++++++++
 .../apache/maven/plugin/MavenPluginValidator.java  |    6 ++-
 .../java/org/apache/maven/plugin/PluginUtils.java  |    8 ++++-
 .../version/DefaultPluginVersionManager.java       |    8 ++++-
 .../project/validation/DefaultModelValidator.java  |   10 +++++-
 .../org/apache/maven/project/pom-4.0.0.xml         |   22 ++++++++++++++
 pom.xml                                            |    5 +++
 14 files changed, 139 insertions(+), 11 deletions(-)

diff --git a/maven-artifact-manager/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java b/maven-artifact-manager/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
index 6318435..e4f8bb1 100644
--- a/maven-artifact-manager/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
+++ b/maven-artifact-manager/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java
@@ -58,6 +58,8 @@ import org.codehaus.plexus.util.FileUtils;
 import org.codehaus.plexus.util.IOUtil;
 import org.codehaus.plexus.util.xml.Xpp3Dom;
 
+import org.apache.maven.artifact.repository.layout.MavenJPackageDepmap;
+
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
@@ -66,6 +68,7 @@ import java.net.URL;
 import java.security.NoSuchAlgorithmException;
 import java.util.Collection;
 import java.util.HashMap;
+import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -409,7 +412,20 @@ public class DefaultWagonManager
                              ArtifactRepository repository )
         throws TransferFailedException, ResourceDoesNotExistException
     {
+
+        String originalVersion = artifact.getVersion();
+        
+        if ( ( repository.getLayout() instanceof org.apache.maven.artifact.repository.layout.JPackageRepositoryLayout ) &&
+             ( System.getProperty("maven2.jpp.mode") != null ) )
+        {
+            MavenJPackageDepmap map = MavenJPackageDepmap.getInstance();
+            Hashtable newInfo = map.getMappedInfo(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion());
+
+            artifact.setVersion((String) newInfo.get("version"));
+        }
+
         String remotePath = repository.pathOf( artifact );
+        artifact.setVersion(originalVersion); // set it back
 
         ArtifactRepositoryPolicy policy = artifact.isSnapshot() ? repository.getSnapshots() : repository.getReleases();
 
@@ -421,8 +437,23 @@ public class DefaultWagonManager
         {
             getLogger().debug( "Skipping blacklisted repository " + repository.getId() );
         }
+        else if ((System.getProperty("maven2.jpp.mode") != null) && 
+                 (!repository.getUrl().startsWith("file:")))
+        {
+            // In JPP mode, repos other than those starting with file:// are 
+            // not allowed
+            getLogger().warn( "Skipping non filebased repository " + repository.getUrl() + " in full offline mode");
+        }
         else
         {
+            // In vanilla mode, the JPP repos should be ignored
+            if ((System.getProperty("maven2.jpp.mode") == null) &&
+                (repository.getId().equals("__jpp_repo__")))
+            {
+                getLogger().warn( "Skipping jpp repository " + repository.getUrl() + " in vanilla mode");
+                return;
+            }
+
             getLogger().debug( "Trying repository " + repository.getId() );
             getRemoteFile( getMirrorRepository( repository ), artifact.getFile(), remotePath, downloadMonitor,
                                    policy.getChecksumPolicy(), false );
diff --git a/maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java b/maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java
index 22cb0ec..edc79a5 100644
--- a/maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java
+++ b/maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java
@@ -85,7 +85,7 @@ public class DefaultRepositoryMetadataManager
                     boolean checkForUpdates =
                         !file.exists() || policy.checkOutOfDate( new Date( file.lastModified() ) );
 
-                    if ( checkForUpdates )
+                    if ( checkForUpdates && (System.getProperty("maven2.jpp.mode") == null))
                     {
                         if ( wagonManager.isOnline() )
                         {
diff --git a/maven-artifact-manager/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java b/maven-artifact-manager/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
index d8c3629..19d702b 100644
--- a/maven-artifact-manager/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
+++ b/maven-artifact-manager/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactResolver.java
@@ -206,7 +206,8 @@ public class DefaultArtifactResolver
                 try
                 {
                     // TODO: force should be passed to the wagon manager
-                    if ( artifact.getRepository() != null )
+                    if ( (artifact.getRepository() != null) &&
+                         (System.getProperty("maven2.jpp.mode") == null))
                     {
                         // the transformations discovered the artifact - so use it exclusively
                         wagonManager.getArtifact( artifact, artifact.getRepository() );
diff --git a/maven-artifact/pom.xml b/maven-artifact/pom.xml
index c77eabc..5b3b2e7 100644
--- a/maven-artifact/pom.xml
+++ b/maven-artifact/pom.xml
@@ -39,5 +39,10 @@ under the License.
       <artifactId>plexus-container-default</artifactId>
       <scope>test</scope>
     </dependency>
+    <dependency>
+      <groupId>jdom</groupId>
+      <artifactId>jdom</artifactId>
+      <version>1.0</version>
+    </dependency>
   </dependencies>
 </project>
diff --git a/maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/DefaultRepositoryLayout.java b/maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/DefaultRepositoryLayout.java
index 4a8bc0f..d8cb4e7 100644
--- a/maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/DefaultRepositoryLayout.java
+++ b/maven-artifact/src/main/java/org/apache/maven/artifact/repository/layout/DefaultRepositoryLayout.java
@@ -23,6 +23,9 @@ import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.handler.ArtifactHandler;
 import org.apache.maven.artifact.metadata.ArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
+import org.apache.maven.artifact.repository.layout.MavenJPackageDepmap;
+
+import java.util.Hashtable;
 
 /**
  * @author jdcasey
@@ -42,6 +45,8 @@ public class DefaultRepositoryLayout
 
         StringBuffer path = new StringBuffer();
 
+        String baseVersion = artifact.getBaseVersion();
+
         path.append( formatAsDirectory( artifact.getGroupId() ) ).append( PATH_SEPARATOR );
         path.append( artifact.getArtifactId() ).append( PATH_SEPARATOR );
         path.append( artifact.getBaseVersion() ).append( PATH_SEPARATOR );
@@ -76,7 +81,17 @@ public class DefaultRepositoryLayout
 
             if ( metadata.storedInArtifactVersionDirectory() )
             {
-                path.append( metadata.getBaseVersion() ).append( PATH_SEPARATOR );
+                String baseVersion = metadata.getBaseVersion();
+
+                if (System.getProperty("maven2.jpp.mode") != null)
+                {
+                    MavenJPackageDepmap map = MavenJPackageDepmap.getInstance();
+                    Hashtable newInfo = map.getMappedInfo(metadata.getGroupId(), metadata.getArtifactId(), baseVersion);
+
+                    baseVersion = (String) newInfo.get("version");
+                }
+
+                path.append( baseVersion ).append( PATH_SEPARATOR );
             }
         }
 
diff --git a/maven-artifact/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactCollector.java b/maven-artifact/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactCollector.java
index d10b795..c945ee5 100644
--- a/maven-artifact/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactCollector.java
+++ b/maven-artifact/src/main/java/org/apache/maven/artifact/resolver/DefaultArtifactCollector.java
@@ -341,7 +341,7 @@ public class DefaultArtifactCollector
                                 // set the recommended version
                                 // TODO: maybe its better to just pass the range through to retrieval and use a transformation?
                                 ArtifactVersion version;
-                                if ( artifact.isSelectedVersionKnown() )
+                                if ( artifact.isSelectedVersionKnown() && System.getProperty("maven2.jpp.mode") == null)
                                 {
                                     version = artifact.getSelectedVersion();
                                 }
@@ -380,7 +380,12 @@ public class DefaultArtifactCollector
                                 //this is dangerous because artifact.getSelectedVersion() can
                                 //return null. However it is ok here because we first check if the
                                 //selected version is known. As currently coded we can't get a null here.
-                                artifact.selectVersion( version.toString() );
+
+                                if ( !artifact.isSelectedVersionKnown() && System.getProperty("maven2.jpp.mode") != null)
+                                    artifact.selectVersion( "DUMMY_VER" );
+                                else
+                                    artifact.selectVersion( version.toString() );
+                                
                                 fireEvent( ResolutionListener.SELECT_VERSION_FROM_RANGE, listeners, child );
                             }
 
diff --git a/maven-artifact/src/main/resources/META-INF/plexus/components.xml b/maven-artifact/src/main/resources/META-INF/plexus/components.xml
index b27fc3c..346adf1 100644
--- a/maven-artifact/src/main/resources/META-INF/plexus/components.xml
+++ b/maven-artifact/src/main/resources/META-INF/plexus/components.xml
@@ -31,6 +31,12 @@ under the License.
       <implementation>org.apache.maven.artifact.repository.layout.LegacyRepositoryLayout</implementation>
     </component>
 
+    <component>
+      <role>org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout</role>
+      <role-hint>jpp</role-hint>
+      <implementation>org.apache.maven.artifact.repository.layout.JPackageRepositoryLayout</implementation>
+    </component>
+
     <!--
      |
      | ArtifactHandlerManager
diff --git a/maven-core/src/main/java/org/apache/maven/plugin/MavenPluginCollector.java b/maven-core/src/main/java/org/apache/maven/plugin/MavenPluginCollector.java
index 93d61fa..68232c6 100644
--- a/maven-core/src/main/java/org/apache/maven/plugin/MavenPluginCollector.java
+++ b/maven-core/src/main/java/org/apache/maven/plugin/MavenPluginCollector.java
@@ -60,6 +60,10 @@ public class MavenPluginCollector
             {
                 pluginsInProcess.add( key );
 
+                if ( System.getProperty("maven2.jpp.debug") != null )
+                {
+                    System.err.println("*DEBUG*: Putting in plugin descriptor list " + key + " and goal prefix is " + pluginDescriptor.getGoalPrefix());
+                }
                 pluginDescriptors.put( key, pluginDescriptor );
 
                 // TODO: throw an (not runtime) exception if there is a prefix overlap - means doing so elsewhere
@@ -75,6 +79,20 @@ public class MavenPluginCollector
     public PluginDescriptor getPluginDescriptor( Plugin plugin )
     {
         String key = PluginUtils.constructVersionedKey( plugin );
+        if ( System.getProperty("maven2.jpp.debug") != null )
+        {
+            System.err.println("*DEBUG*: Constructed plugin version key is " + key);
+        }
+
+        PluginDescriptor descriptor = (PluginDescriptor) pluginDescriptors.get( key );
+
+        // In JPP mode, we give it a second chance
+        if ( ( descriptor == null ) && 
+             ( System.getProperty("maven2.jpp.mode") != null ) )
+        {
+            //for descriptors
+        }
+
         return (PluginDescriptor) pluginDescriptors.get( key );
     }
 
diff --git a/maven-core/src/main/java/org/apache/maven/plugin/MavenPluginValidator.java b/maven-core/src/main/java/org/apache/maven/plugin/MavenPluginValidator.java
index dc8e6e1..b8cd650 100644
--- a/maven-core/src/main/java/org/apache/maven/plugin/MavenPluginValidator.java
+++ b/maven-core/src/main/java/org/apache/maven/plugin/MavenPluginValidator.java
@@ -57,8 +57,10 @@ public class MavenPluginValidator
             {
                 errors.add( "Plugin's descriptor contains the wrong artifact ID: " + pluginDescriptor.getArtifactId() );
             }
-            
-            if ( !pluginArtifact.getBaseVersion().equals( pluginDescriptor.getVersion() ) )
+
+            if ( !pluginArtifact.getBaseVersion().equals( pluginDescriptor.getVersion() ) && 
+                 ( System.getProperty("maven2.jpp.mode") == null ) 
+               )            
             {
                 errors.add( "Plugin's descriptor contains the wrong version: " + pluginDescriptor.getVersion() );
             }
diff --git a/maven-core/src/main/java/org/apache/maven/plugin/PluginUtils.java b/maven-core/src/main/java/org/apache/maven/plugin/PluginUtils.java
index 0b1e9a5..21a4af7 100644
--- a/maven-core/src/main/java/org/apache/maven/plugin/PluginUtils.java
+++ b/maven-core/src/main/java/org/apache/maven/plugin/PluginUtils.java
@@ -72,7 +72,13 @@ class PluginUtils
         String baseVersion = ArtifactUtils.toSnapshotVersion( version );
 
         StringBuffer key = new StringBuffer( 128 );
-        key.append( groupId ).append( ':' ).append( artifactId ).append( ':' ).append( baseVersion );
+
+        // In JPP mode, we don't want to use versions in keys
+
+        if (System.getProperty("maven2.jpp.mode") == null)
+            key.append( groupId ).append( ':' ).append( artifactId ).append( ':' ).append( baseVersion );
+        else
+            key.append( groupId ).append( ':' ).append( artifactId );
         return key.toString();
     }
 
diff --git a/maven-core/src/main/java/org/apache/maven/plugin/version/DefaultPluginVersionManager.java b/maven-core/src/main/java/org/apache/maven/plugin/version/DefaultPluginVersionManager.java
index 5a484bc..6dd6dbb 100644
--- a/maven-core/src/main/java/org/apache/maven/plugin/version/DefaultPluginVersionManager.java
+++ b/maven-core/src/main/java/org/apache/maven/plugin/version/DefaultPluginVersionManager.java
@@ -224,9 +224,15 @@ public class DefaultPluginVersionManager
         }
 
         // if we still haven't found a version, then fail early before we get into the update goop.
-        if ( StringUtils.isEmpty( version ) )
+        if ( (StringUtils.isEmpty( version )) && (System.getProperty("maven2.jpp.mode") == null))
         {
             throw new PluginVersionNotFoundException( groupId, artifactId );
+        } else if (System.getProperty("maven2.jpp.mode") != null)
+        {
+            // Doesn't matter what we have here. We need *something* because 
+            // metadata is not retrieved in offline mode, so there needs to be
+            // some kind of version
+            version = "DUMMY_VER";
         }
 
         // if the plugin registry is inactive, then the rest of this goop is useless...
diff --git a/maven-project/src/main/java/org/apache/maven/project/validation/DefaultModelValidator.java b/maven-project/src/main/java/org/apache/maven/project/validation/DefaultModelValidator.java
index ede61f4..dba7bca 100644
--- a/maven-project/src/main/java/org/apache/maven/project/validation/DefaultModelValidator.java
+++ b/maven-project/src/main/java/org/apache/maven/project/validation/DefaultModelValidator.java
@@ -43,7 +43,7 @@ import java.util.List;
 public class DefaultModelValidator
     implements ModelValidator
 {
-    private static final String ID_REGEX = "[A-Za-z0-9_\\-.]+";
+    private static final String ID_REGEX = "[A-Za-z0-9_/\\\\.-]+";
 
     ///////////////////////////////////////////////////////////////////////////
     // ModelValidator Implementation
@@ -88,7 +88,13 @@ public class DefaultModelValidator
 
             validateStringNotEmpty( "dependencies.dependency.type", result, d.getType(), d.getManagementKey() );
 
-            validateStringNotEmpty( "dependencies.dependency.version", result, d.getVersion(), d.getManagementKey() );
+            // In JPP mode, don't bother validating. But do put a dummy 
+            // version if one is not provided
+            if ((System.getProperty("maven2.jpp.mode") != null) &&
+                (d.getVersion() == null)) 
+                d.setVersion("DUMMY_VER");
+            else
+                validateStringNotEmpty( "dependencies.dependency.version", result, d.getVersion(), d.getManagementKey() );
 
             if ( Artifact.SCOPE_SYSTEM.equals( d.getScope() ) )
             {
diff --git a/maven-project/src/main/resources/org/apache/maven/project/pom-4.0.0.xml b/maven-project/src/main/resources/org/apache/maven/project/pom-4.0.0.xml
index 00e84c1..b0e4289 100644
--- a/maven-project/src/main/resources/org/apache/maven/project/pom-4.0.0.xml
+++ b/maven-project/src/main/resources/org/apache/maven/project/pom-4.0.0.xml
@@ -32,6 +32,15 @@ under the License.
         <enabled>false</enabled>
       </snapshots>
     </repository>
+    <repository>
+      <id>__jpp_repo__</id>
+      <name>JPackage Maven Repository</name>
+      <layout>jpp</layout>
+      <url>file:///usr/share/maven2/repository</url>
+      <snapshots>
+        <enabled>true</enabled>
+      </snapshots>
+    </repository>
   </repositories>
 
   <pluginRepositories>
@@ -47,6 +56,19 @@ under the License.
         <updatePolicy>never</updatePolicy>
       </releases>
     </pluginRepository>
+    <pluginRepository>
+      <id>__jpp_repo__</id>
+      <name>JPackage Maven Repository</name>
+      <layout>jpp</layout>
+      <url>file:///usr/share/maven2/repository</url>
+      <snapshots>
+        <enabled>true</enabled>
+      </snapshots>
+      <releases>
+        <updatePolicy>never</updatePolicy>
+      </releases>
+    </pluginRepository>
+
   </pluginRepositories>
 
   <build>
diff --git a/pom.xml b/pom.xml
index e2fde29..3fe31f5 100644
--- a/pom.xml
+++ b/pom.xml
@@ -481,6 +481,11 @@ under the License.
         <artifactId>classworlds</artifactId>
         <version>1.1</version>
       </dependency>
+      <dependency>
+        <groupId>jdom</groupId>
+        <artifactId>jdom</artifactId>
+        <version>1.0</version>
+      </dependency>
     </dependencies>
     <!--start-->
   </dependencyManagement>
-- 
1.7.3.4

